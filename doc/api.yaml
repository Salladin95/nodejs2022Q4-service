<<<<<<< HEAD
openapi: 3.0.3
=======
openapi: 3.0.0
>>>>>>> 2e92b263cdcbc29a187b0409783d8d6fb7c7ade2
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0

servers:
  - url: /api
<<<<<<< HEAD
tags:
  - name: User
    description: Everything about your User
  - name: Artist
    description: Everything about your Artist
  - name: Track
    description: Everything about your Track
  - name: Album
    description: Everything about your Album
  - name: Favorites
    description: Operations with favs

paths:
  /user:
    get:
      tags:
        - User
      summary: Get list of users
      description: Get list of users
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - User
      summary: Create new user
      description: Create new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request

  /user/{userId}:
    put:
      tags:
        - User
      summary: Update an existing user
      description: Update an existing user by Id
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '403':
          description: FORBIDDEN
        '404':
          description: User not found
    get:
      tags:
        - User
      summary: Find user by ID
      description: Returns a single user
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
    delete:
      tags:
        - User
      summary: Deletes a user
      description: delete user
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found

  /artist:
    get:
      tags:
        - Artist
      summary: Get list of artists
      description: Get list of artists
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
    post:
      tags:
        - Artist
      summary: Create new artist
      description: Create new artist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request

  /artist/{artistId}:
    put:
      tags:
        - Artist
      summary: Update an existing artist
      description: Update an existing artist by Id
      parameters:
        - name: artistId
          in: path
          description: ID of artist to return
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Invalid ID supplied
        403:
          description: FORBIDDEN
        404:
          description: Artist not found
    get:
      tags:
        - Artist
      summary: Find user by ID
      description: Returns a single Artist
      parameters:
        - name: artistId
          in: path
          description: ID of artist to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Invalid ID supplied
        404:
          description: Artist not found
    delete:
      tags:
        - Artist
      summary: Deletes a artist
      description: delete artist
      parameters:
        - name: artistId
          in: path
          description: ID of artist to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: successful operation
        400:
          description: Invalid ID supplied
        404:
          description: Artist not found

  /track:
    get:
      tags:
        - Track
      summary: Get list of tracks
      description: Get list of tracks
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
    post:
      tags:
        - Track
      summary: Create new track
      description: Create new track
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request

  /track/{trackId}:
    get:
      tags:
        - Track
      summary: Get single track by id
      description: Gets single track by id
      parameters:
        - name: trackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Invalid ID supplied
        404:
          description: Track was not found.
    put:
      tags:
        - Track
      summary: Update an existing track
      description: Update an existing track by Id
      parameters:
        - name: trackId
          in: path
          description: ID of track to return
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Invalid ID supplied
        403:
          description: FORBIDDEN
        404:
          description: Track not found
    delete:
      tags:
        - Track
      summary: Delete track
      description: Delete track from library
      parameters:
        - name: trackId
          in: path
          description: ID of track to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Successful operation
        400:
          description: Invalid ID supplied
        404:
          description: Track not found

  /album:
    get:
      tags:
        - Album
      summary: Get list of albums
      description: Get list of albums
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
    post:
      tags:
        - Album
      summary: Create new album
      description: Create new album
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request

  /album/{albumId}:
    get:
      tags:
        - Album
      summary: Get single album by id
      description: Gets single album by id
      parameters:
        - name: albumId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Invalid ID supplied
        404:
          description: Track was not found.
    put:
      tags:
        - Album
      summary: Update an existing Album
      description: Update an existing Album by Id
      parameters:
        - name: albumId
          in: path
          description: ID of album to return
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Invalid ID supplied
        403:
          description: FORBIDDEN
        404:
          description: Track not found
    delete:
      tags:
        - Album
      summary: Delete album
      description: Delete album from library
      parameters:
        - name: albumId
          in: path
          description: ID of album to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Successful operation
        400:
          description: Invalid ID supplied
        404:
          description: Album not found

  /favs:
    get:
      tags:
        - Favorites
      summary: Get all favorites
      description: Gets all favorites movies, tracks and books
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorites'
  /favs/track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add track to the favorites
      description: Add track to the favorites
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Invalid ID supplied
        422:
          description: Track with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete track from favorites
      description: Delete track from favorites
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Invalid ID supplied
        404:
          description: Track was not found.
  /favs/album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add album to the favorites
      description: Add album to the favorites
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Invalid ID supplied
        422:
          description: Album with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete album from favorites
      description: Delete album from favorites
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Invalid ID supplied
        404:
          description: Album was not found.
  /favs/artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add artist to the favorites
      description: Add artist to the favorites
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Invalid ID supplied
        422:
          description: Artist with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete artist from favorites
      description: Delete artist from favorites
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Invalid ID supplied
        404:
          description: Artist was not found.
=======
>>>>>>> 2e92b263cdcbc29a187b0409783d8d6fb7c7ade2

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
          example: 'TestUser'
        version:
          type: number
          example: 1
        createAt:
          type: number
          example: 1655000000
        updateAt:
          type: number
          example: 1655000000
      required:
        - id
        - login
<<<<<<< HEAD
        - version
        - createAt
        - updateAt

    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: 'TestUser'
        password:
          type: string
          example: '12345'
      required:
        - login
        - password

    UpdateUserDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: '12345'
        newPassword:
          type: string
          example: '123456'
      required:
        - oldPassword
        - newPassword

=======
>>>>>>> 2e92b263cdcbc29a187b0409783d8d6fb7c7ade2
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Freddie Mercury'
        grammy:
          type: boolean
          example: false
      required:
        - id
        - name
<<<<<<< HEAD
        - grammy

    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: 'TesArtist'
        grammy:
          type: boolean
          example: true
      required:
        - name
        - grammy

    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: 'TesArtist'
        grammy:
          type: boolean
          example: false

=======
>>>>>>> 2e92b263cdcbc29a187b0409783d8d6fb7c7ade2
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Innuendo'
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          format: uuid
          nullable: true
      required:
        - id
        - name
<<<<<<< HEAD
        - year
        - artistId

    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: 'TesAlbum'
        artistId:
          type: string
          format: uuid
          nullable: true
        year:
          type: integer
          example: 1999
      required:
        - name
        - year

    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: 'TesAlbum'
        artistId:
          type: string
          format: uuid
          nullable: true
        year:
          type: integer
          example: 1999

=======
>>>>>>> 2e92b263cdcbc29a187b0409783d8d6fb7c7ade2
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          description: In seconds
          example: 262
      required:
        - id
        - name
        - duration
<<<<<<< HEAD
        - albumId
        - artistId

    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: 'TesAlbum'
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          example: 111
      required:
        - name
        - duration

    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: 'TesAlbum'
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          example: 111

=======
>>>>>>> 2e92b263cdcbc29a187b0409783d8d6fb7c7ade2
    Favorites:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
  responses:
<<<<<<< HEAD
    BadRequest:
      description: Bad Request
    ValidationUUIDFailed:
      description: Validation failed (uuid is expected)
    NotFound:
      description: Not found
=======
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

paths:
  /login:
    post:
      tags:
        - Login
      security: []
      summary: Login
      description: Logins a user and returns a JWT-token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: Username
                password:
                  type: string
                  description: Password
              required:
                - user
                - login
      responses:
        200:
          description: Successful login.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                description: JWT Token
        403:
          description: Incorrect login or password
  /signup:
    post:
      tags:
        - Signup
      security: [ ]
      summary: Signup
      description: Signup a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  minLength: 3
                  maxLength: 255
                  description: Username
                password:
                  type: string
                  format: password
                  pattern: ^[a-zA-Z0-9]{3,30}
                  description: Password
              required:
                - login
                - password
      responses:
        204:
          description: Successful signup
        400:
          description: Bad request
        409:
          description: Conflict. Login already exists
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Gets all users
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Users
      summary: Create user
      description: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: The user's login
                password:
                  type: string
                  description: The user's password
              required:
                - login
                - password
      responses:
        201:
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. body does not contain required fields
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Get single user by id
      description: Get single user by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. userId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found

    put:
      tags:
        - Users
      summary: Update a user's password
      description: Updates a user's password by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                oldPassword:
                  type: string
                  description: The user's old password
                newPassword:
                  type: string
                  description: The user's new password
              required:
                - oldPassword
                - newPassword
      responses:
        200:
          description: The user has been updated.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  id:
                    type: string
                    format: uuid
                  login:
                    type: string
                    example: TestUser
                  version:
                    type: integer
                    example: 2
                  createAt:
                    type: integer
                    example: 1655000000
                  updateAt:
                    type: integer
                    example: 1655999999
        400:
          description: Bad request. userId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: oldPassowrd is wrong
        404:
          description: User not found

    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes user by ID.
      responses:
        204:
          description: The user has been deleted
        400:
          description: Bad request. userId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
  /tracks:
    get:
      tags:
        - Track
      summary: Get tracks list
      description: Gets all library tracks list
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Track
      summary: Add new track
      description: Add new track information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                artistId:
                  type: string
                  format: uuid
                albumId:
                  type: string
                  format: uuid
                duration:
                  type: integer
                  description: In seconds
              required:
                - name
                - duration
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request. body does not contain required fields
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /tracks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Track
      summary: Get single track by id
      description: Gets single track by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request. trackId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track was not found.
    put:
      tags:
        - Track
      summary: Update track information
      description: Update library track information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                  example: Bohemian Rhapsody
                artistId:
                  type: string
                  format: uuid
                  nullable: true
                duration:
                  type: integer
                  description: In seconds
                  example: 355
                albumId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - duration
      responses:
        200:
          description: The track has been updated.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                    example: Bohemian Rhapsody
                  artistId:
                    type: string
                    format: uuid
                    nullable: true
                  duration:
                    type: integer
                    description: In seconds
                    example: 355
                  albumId:
                    type: string
                    format: uuid
                    nullable: true
        400:
          description: Bad request. trackId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track was not found.
    delete:
      tags:
        - Track
      summary: Delete track
      description: Delete track from library
      responses:
        204:
          description: Delelted succesfully
        400:
          description: Bad request. trackId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track was not found.
  /albums:
    get:
      tags:
        - Album
      summary: Get albums list
      description: Gets all library alibums list
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Album
      summary: Add new album
      description: Add new album information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                year:
                  type: integer
                artistId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - year
      responses:
        201:
          description: Almub is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request. body does not contain required fields
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /albums/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Album
      summary: Get single album by id
      description: Gets single album by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request. albumId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album was not found.
    put:
      tags:
        - Album
      summary: Update album information
      description: Update library album information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                year:
                  type: integer
                artistId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - year
      responses:
        200:
          description: The album has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request. albumId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album was not found.
    delete:
      tags:
        - Album
      summary: Delete album
      description: Delete album from library
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Bad request. albumId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album was not found.
  /artists:
    get:
      tags:
        - Artist
      summary: Get all artists
      description: Gets all artists
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Artist
      summary: Add new artist
      description: Add new artist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                grammy:
                  type: boolean
              required:
                - name
                - grammy
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request. body does not contain required fields
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /artists/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Artist
      summary: Get single artist by id
      description: Get single artist by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request. artistId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist was not found.
    put:
      tags:
        - Artist
      summary: Update artist information
      description: Update artist information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                grammy:
                  type: boolean
              required:
                - name
                - grammy
      responses:
        200:
          description: The artist has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request. artistId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist was not found.
    delete:
      tags:
        - Artist
      summary: Delete artist
      description: Delete artist from library
      responses:
        204:
          description: Delelted succesfully
        400:
          description: Bad request. artistId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist was not found.
  /favs:
    get:
      tags:
        - Favorites
      summary: Get all favorites
      description: Gets all favorites movies, tracks and books
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorites'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /favs/track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add track to the favorites
      description: Add track to the favorites
      responses:
        201:
          description: Added succesfully
        400:
          description: Bad. trackId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          description: Track with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete track from favorites
      description: Delete track from favorites
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Bad. trackId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track was not found.
  /favs/album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add album to the favorites
      description: Add album to the favorites
      responses:
        201:
          description: Added succesfully
        400:
          description: Bad. albumId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          description: Album with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete album from favorites
      description: Delete album from favorites
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Bad. albumId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album was not found.
  /favs/artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add artist to the favorites
      description: Add artist to the favorites
      responses:
        201:
          description: Added succesfully
        400:
          description: Bad request. artistId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          description: Artist with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete artist from favorites
      description: Delete artist from favorites
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Bad request. artistId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist was not found.
>>>>>>> 2e92b263cdcbc29a187b0409783d8d6fb7c7ade2
