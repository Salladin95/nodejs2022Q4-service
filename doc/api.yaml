openapi: 3.0.3
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0

servers:
  - url: /api
tags:
  - name: User
    description: Everything about your User
  - name: Artist
    description: Everything about your Artist
  - name: Track
    description: Everything about your Track
  - name: Album
    description: Everything about your Album
  - name: Favorites
    description: Operations with favs

paths:
  /user:
    get:
      tags:
        - User
      summary: Get list of users
      description: Get list of users
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - User
      summary: Create new user
      description: Create new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request

  /user/{userId}:
    put:
      tags:
        - User
      summary: Update an existing user
      description: Update an existing user by Id
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '403':
          description: FORBIDDEN
        '404':
          description: User not found
    get:
      tags:
        - User
      summary: Find user by ID
      description: Returns a single user
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
    delete:
      tags:
        - User
      summary: Deletes a user
      description: delete user
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found

  /artist:
    get:
      tags:
        - Artist
      summary: Get list of artists
      description: Get list of artists
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
    post:
      tags:
        - Artist
      summary: Create new artist
      description: Create new artist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request

  /artist/{artistId}:
    put:
      tags:
        - Artist
      summary: Update an existing artist
      description: Update an existing artist by Id
      parameters:
        - name: artistId
          in: path
          description: ID of artist to return
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Invalid ID supplied
        403:
          description: FORBIDDEN
        404:
          description: Artist not found
    get:
      tags:
        - Artist
      summary: Find user by ID
      description: Returns a single Artist
      parameters:
        - name: artistId
          in: path
          description: ID of artist to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Invalid ID supplied
        404:
          description: Artist not found
    delete:
      tags:
        - Artist
      summary: Deletes a artist
      description: delete artist
      parameters:
        - name: artistId
          in: path
          description: ID of artist to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: successful operation
        400:
          description: Invalid ID supplied
        404:
          description: Artist not found

  /track:
    get:
      tags:
        - Track
      summary: Get list of tracks
      description: Get list of tracks
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
    post:
      tags:
        - Track
      summary: Create new track
      description: Create new track
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request

  /track/{trackId}:
    get:
      tags:
        - Track
      summary: Get single track by id
      description: Gets single track by id
      parameters:
        - name: trackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Invalid ID supplied
        404:
          description: Track was not found.
    put:
      tags:
        - Track
      summary: Update an existing track
      description: Update an existing track by Id
      parameters:
        - name: trackId
          in: path
          description: ID of track to return
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Invalid ID supplied
        403:
          description: FORBIDDEN
        404:
          description: Track not found
    delete:
      tags:
        - Track
      summary: Delete track
      description: Delete track from library
      parameters:
        - name: trackId
          in: path
          description: ID of track to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Successful operation
        400:
          description: Invalid ID supplied
        404:
          description: Track not found

  /album:
    get:
      tags:
        - Album
      summary: Get list of albums
      description: Get list of albums
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
    post:
      tags:
        - Album
      summary: Create new album
      description: Create new album
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request

  /album/{albumId}:
    get:
      tags:
        - Album
      summary: Get single album by id
      description: Gets single album by id
      parameters:
        - name: albumId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Invalid ID supplied
        404:
          description: Track was not found.
    put:
      tags:
        - Album
      summary: Update an existing Album
      description: Update an existing Album by Id
      parameters:
        - name: albumId
          in: path
          description: ID of album to return
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Invalid ID supplied
        403:
          description: FORBIDDEN
        404:
          description: Track not found
    delete:
      tags:
        - Album
      summary: Delete album
      description: Delete album from library
      parameters:
        - name: albumId
          in: path
          description: ID of album to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Successful operation
        400:
          description: Invalid ID supplied
        404:
          description: Album not found

  /favs:
    get:
      tags:
        - Favorites
      summary: Get all favorites
      description: Gets all favorites movies, tracks and books
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorites'
  /favs/track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add track to the favorites
      description: Add track to the favorites
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Invalid ID supplied
        422:
          description: Track with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete track from favorites
      description: Delete track from favorites
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Invalid ID supplied
        404:
          description: Track was not found.
  /favs/album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add album to the favorites
      description: Add album to the favorites
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Invalid ID supplied
        422:
          description: Album with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete album from favorites
      description: Delete album from favorites
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Invalid ID supplied
        404:
          description: Album was not found.
  /favs/artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add artist to the favorites
      description: Add artist to the favorites
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Invalid ID supplied
        422:
          description: Artist with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete artist from favorites
      description: Delete artist from favorites
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Invalid ID supplied
        404:
          description: Artist was not found.

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
          example: 'TestUser'
        version:
          type: number
          example: 1
        createAt:
          type: number
          example: 1655000000
        updateAt:
          type: number
          example: 1655000000
      required:
        - id
        - login
        - version
        - createAt
        - updateAt

    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: 'TestUser'
        password:
          type: string
          example: '12345'
      required:
        - login
        - password

    UpdateUserDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: '12345'
        newPassword:
          type: string
          example: '123456'
      required:
        - oldPassword
        - newPassword

    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Freddie Mercury'
        grammy:
          type: boolean
          example: false
      required:
        - id
        - name
        - grammy

    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: 'TesArtist'
        grammy:
          type: boolean
          example: true
      required:
        - name
        - grammy

    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: 'TesArtist'
        grammy:
          type: boolean
          example: false

    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Innuendo'
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          format: uuid
          nullable: true
      required:
        - id
        - name
        - year
        - artistId

    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: 'TesAlbum'
        artistId:
          type: string
          format: uuid
          nullable: true
        year:
          type: integer
          example: 1999
      required:
        - name
        - year

    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: 'TesAlbum'
        artistId:
          type: string
          format: uuid
          nullable: true
        year:
          type: integer
          example: 1999

    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          description: In seconds
          example: 262
      required:
        - id
        - name
        - duration
        - albumId
        - artistId

    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: 'TesAlbum'
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          example: 111
      required:
        - name
        - duration

    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: 'TesAlbum'
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          example: 111

    Favorites:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
  responses:
    BadRequest:
      description: Bad Request
    ValidationUUIDFailed:
      description: Validation failed (uuid is expected)
    NotFound:
      description: Not found
